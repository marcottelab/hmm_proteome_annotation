"""
Takes a [spec_code]_all.txt file and filters for top hit generated by process_tot.py
arg 1 = [spec]_all.txt
outputs:
 [spec_proteome_lvl]_onlyhits.txt: removes proteins which do not have a hit and annotates 
 [spec_proteome_lvl]_tophit.txt: Only top hit and hitless proteins
CDM 2-16-16
"""    
import sys
import pandas as pd
import numpy as np
import ast    
import scan_proc_functions as spf
import csv
#sys.path[0:0] = ['/home1/03491/cmcwhite/bin']

if len(sys.argv)==3:
    filename=sys.argv[1]
    annotationfilename=sys.argv[2]
    print "annotationfilename", annotationfilename
    df = spf.processdf(filename)
    print len(df), "initial hits" 
    basename = filename.replace("all.txt", "")
#    fasta = sys.argv[3]



#    print "Get proteins without an HMM profile hit"
#    outfile = basename +"nonhits.txt"
#    print df
#    non_hits= spf.nonhits(df)
#    print non_hits
#    print len(non_hits), "non hits"
#    non_hits.to_csv(outfile, sep="\t", na_rep="n/a", index=False, quoting=csv.QUOTE_NONE,  quotechar="")

  

    print "Get annotated file"
    outfile = basename + "annotated.txt"
#    print df
#    only_hitstmp=spf.onlyhits(df)
#    print len(only_hitstmp), "only hits tmp starting"
#    print only_hitstmp
#    only_hitstmp2 = spf.hitlength(only_hitstmp)
#    print len(only_hitstmp2), "only hits tmp after hitlength"
    annotated = spf.annotate(df, annotationfilename)
    print annotated
    print len(annotated), "length after annotations"


    annotated.to_csv(outfile, sep="\t", index=False, quoting=csv.QUOTE_NONE, quotechar="")    

#    if not only_hits.empty:
#        print "Get just the top hit"
#        outfile = basename + "tophit.txt"
#        top1 = spf.tophit(only_hits)
#        print len(top1), "hits"
#        top1.to_csv(outfile, sep="\t", index=False, quoting=csv.QUOTE_NONE, quotechar="")    
   
else:
    print "need infile  [basename name]_all.txt generated from opt_process_all,  annotation file, and fasta file"
